"""Create datastructure documentation page

This will add a page with various svg graphs and html tables
describing the datastructure: dependencies, columns provided,
and configuration options that apply to each plugins.

For extra credit, the SVGs are clickable.
"""
import os
import shutil
from collections import defaultdict

import graphviz
import numpy as np
import pandas as pd

import amstrax

this_dir = os.path.dirname(os.path.realpath(__file__))

page_header = """
{title}
===========================================================

This page is an autogenerated reference for all the plugins in amstrax.context.{context_name}-context. 

Colors indicate data kinds. To load tables with different data kinds,
you currently need more than one `get_df` (or `get_array`) commands.

"""

template = """
{data_type}
--------------------------------------------------------

Description
~~~~~~~~~~~~~~~~~~~~~~

Provided by plugin: `{p.__class__.__name__} <https://github.com/XAMS-nikhef/{package}/blob/master/{module}.py>`_

Data kind: {kind}

{docstring}


Columns provided
~~~~~~~~~~~~~~~~~~~~~~
.. raw:: html

{columns}


Dependencies
~~~~~~~~~~~~~~~~~~~~~~
.. raw:: html

{svg}


Configuration options
~~~~~~~~~~~~~~~~~~~~~~~

These are all options that affect this data type. 
This also includes options taken by dependencies of this datatype,
because changing any of those options affect this data indirectly.

.. raw:: html

{config_options}


"""

titles = {'xams': 'XAMS - amstrax datastructure',
          'xams_little': 'XAMSL - amstrax datastructure',
          }


kind_colors = dict(
    events='#ffffff',
    peaks='#98fb98',
    truth='#0066ff',
    peaklets='#d9ff66',
    merged_s2s='#ccffcc',
    records='#ffa500',
    raw_records='#ff4500',
    raw_records_coin='#ff4500')

suffices = ['_he', '_nv', "_mv"]
for _suffix in suffices:
    to_copy = list(kind_colors.keys())
    for c in to_copy:
        kind_colors[c + _suffix] = kind_colors[c]


def add_spaces(x):
    """Add four spaces to every line in x

    This is needed to make html raw blocks in rst format correctly
    """
    y = ''
    if isinstance(x, str):
        x = x.split('\n')
    for q in x:
        y += '    ' + q
    return y


def get_plugins_deps(st):
    """
    For a given Strax.Context return the dependencies per plugin split by the known
        tree_suffices.
    :param st: Strax.Context
    :return: dict of default dicts containing the number of dependencies.
    """
    plugins_by_deps = defaultdict(list)
    for pn, p in st._plugin_class_registry.items():
        plugins = st._get_plugins((pn,), run_id='0')
        plugins_by_deps[len(plugins)].append(pn)
    return plugins_by_deps


def get_context(name='xams'):
    """
    Need to init a context without initializing the runs_db as that requires the
        appropriate passwords.
    :return: amstrax context that mimics the xenonnt_online context without the rundb init
    """
    st = getattr(amstrax.contexts, name)(init_rundb=False)
    return st


def build_data_structure_doc():
    pd.set_option('display.max_colwidth', int(1e9))

    for context_name in ['xams', 'xams_little']:
        print(f'Make for {context_name}')
        st = get_context(context_name)

        # Too lazy to write proper graph sorter
        # Make dictionary {total number of dependencies below -> list of plugins}

        plugins_by_deps = get_plugins_deps(st)

        out = page_header.format(title=titles[context_name], context_name=context_name)
        os.makedirs(this_dir + f'/graphs', exist_ok=True)
        for n_deps in list(reversed(sorted(list(plugins_by_deps.keys())))):
            for data_type in plugins_by_deps[n_deps]:
                plugins = st._get_plugins((data_type,), run_id='0')

                # Create dependency graph
                g = graphviz.Digraph(format='svg')
                # g.attr('graph', autosize='false', size="25.7,8.3!")
                for d, p in plugins.items():
                    g.node(d,
                           style='filled',
                           href='#' + d.replace('_', '-'),
                           fillcolor=kind_colors.get(p.data_kind_for(d), 'grey'))
                    for dep in p.depends_on:
                        g.edge(d, dep)

                fn = this_dir + f'/graphs/' + data_type
                g.render(fn)
                with open(fn + '.svg', mode='r') as f:
                    svg = add_spaces(f.readlines()[5:])

                config_df = st.show_config(data_type).sort_values(by='option')

                # Shorten long default values
                config_df['default'] = [
                    x[:10] + '...' + x[-10:]
                    if isinstance(x, str) and len(x) > 30 else x
                    for x in config_df['default'].values]

                p = plugins[data_type]

                package = p.__module__.split('.')[0]
                out += template.format(
                    context_name=context_name,
                    p=p,
                    module=str(p.__module__).replace('.', '/'),
                    package=package,
                    svg=svg,
                    data_type=data_type,
                    columns=add_spaces(
                        st.data_info(data_type).to_html(index=False)),
                    kind=p.data_kind_for(data_type),
                    docstring=p.__doc__ if p.__doc__ else '(no plugin description)',
                    config_options=add_spaces(config_df.to_html(index=False)))

            with open(this_dir + f'/reference/datastructure_{context_name}.rst', mode='w') as f:
                f.write(out)

            shutil.rmtree(this_dir + f'/graphs')


try:
    if __name__ == '__main__':
        build_data_structure_doc()
except KeyError as e:
    print(e)
    raise(e)
    pass
